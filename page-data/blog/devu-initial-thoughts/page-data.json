{"componentChunkName":"component---src-templates-blog-template-tsx","path":"/blog/devu-initial-thoughts","result":{"data":{"markdownRemark":{"html":"<p>I am currently working on a project called devu. Don't ask about the name;\nit was entirely random. I just needed a repo name to push code to.</p>\n<p>devu was created to showcase the ability to smartly generate APIs from a\nGraphQL schema. In the GraphQL world, there is the commonly accepted bit of magic\nin the form of the <code class=\"language-text\">gql</code> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> typeDefs <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  type User {\n    id: Int\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> typeDefs <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The <code class=\"language-text\">gql</code> function is a GraphQL parser which emits a syntax tree representation\nof your GraphQL string. Apollo uses this schema to map types to their appropriate\nresolvers. As a by-product of that, it also validates the schemas of requests to\nthe server. It also uses it for the GraphQL IDE that it provides so that it\ncan show type documentation.</p>\n<p>devu makes use of this <code class=\"language-text\">gql</code> function but in a different way. With a regular\nserver, you need to provide resolvers that map to your schema. devu does this for\nyou by providing mock resolvers. devu makes an attempt to resolve fields in a smart\nway. For example, if you have a field that <em>sounds like</em> a date and is a <code class=\"language-text\">String</code> type:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-graphql line-numbers\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">Int</span>\n  <span class=\"token attr-name\">created_at</span><span class=\"token punctuation\">:</span> <span class=\"token scalar\">String</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>It will automatically produce an ISO date string for this field. devu does this\nfor many common field names, such as first names, last names, phone numbers,\nemails, IDs, etc.</p>\n<p>devu can also stitch together multiple schemas from different users.\nI mainly added this to showcase how to safely merge API schemas into one\nfederated graph using type prefixing. I also had in mind that it might be fun\nfor developers who want to share APIs with each other and build on top of them.\nThis, however, is more of a \"build a dream\" aspect than a \"build something\nthat businesses will want\" aspect.</p>\n<p>Here's an example in which you might want to use devu:</p>\n<blockquote>\n<p>You have an application that consumes an external GraphQL API. For testing,\nyou do not wish to hit the actual API, but would prefer to use a mock instead.\nRather than writing your own custom mocks, you simply provide the schema of\nthe GraphQL API that you're consuming to devu, and it creates the API for you.</p>\n</blockquote>\n<p>Thoughts about the path forward:</p>\n<ul>\n<li>\n<p>Adding custom resolver support requires some hard decisions. There are a\nfew things we can accept:</p>\n<ul>\n<li>\n<p>simple values</p>\n</li>\n<li>\n<p>URLs from which we grab values</p>\n<ul>\n<li>\n<p>need strict timeout handling or it'll bog down the server</p>\n</li>\n<li>\n<p>timeout should be configurable for people who host their own</p>\n</li>\n</ul>\n</li>\n<li>\n<p>A DSL of some form to support conditional resolvers</p>\n</li>\n<li>\n<p>Allowing JavaScript execution. Not acceptable for the current\nserver, but could be a decent option for internal usage in a trusted\nenvironment.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Adding mutation support is equally tricky, because I think it'd be best\nto support both a persistent and non persistent mode. Persistence would\nbe handy for actual tests, with the controlled ability to flush the\ndata upon request. Persistence would also imply though that saved data\nwould be queryable as well, and would require custom resolvers. The\nlack of persistence is nice for simplicity, and can be useful for\nrapid prototyping scenarios where you just need to see some data on\nyour screen, and see that requests are being made successfully.</p>\n</li>\n<li>\n<p>The API generator should be extracted from the server implementation.\nIt's useful on its own as a library.</p>\n</li>\n<li>\n<p>It's probably useful to allow users to make multiple schemas instead\nof just one.</p>\n</li>\n</ul>\n<hr>\n<p>If you want to try out the app yourself, go to <a href=\"https://joe-devu.herokuapp.com/\">this page</a>\nand sign in with your GitHub. On your profile, you can enter in a GraphQL\nschema, save it, and then go into GraphiQL to immediately begin querying\nit.</p>","frontmatter":{"date":"August 14, 2022","slug":"/blog/devu-initial-thoughts","title":"devu: Initial Thoughts"}}},"pageContext":{"slug":"/blog/devu-initial-thoughts"}},"staticQueryHashes":["1557651402","63159454"]}