{"version":3,"file":"component---src-templates-blog-template-tsx-ee761e56c27e5d4723f2.js","mappings":"kOAuCA,MAvB4BA,IAAuC,IAAtC,SAAEC,EAAQ,WAAEC,GAAa,GAAOF,EAC3D,MAAMG,GAAOC,EAAAA,EAAAA,gBAAe,cAU5B,OACEC,EAAAA,cAACC,EAAAA,EAAAA,SAAqB,CAACC,MAAO,CAAEL,eAC9BG,EAAAA,cAACG,EAAAA,EAAM,CACLC,UAAU,SACVC,UAAWP,EAAKQ,KAAKC,aAAaC,MAClCC,MAAO,CAAEC,SAAU,YAErBV,EAAAA,cAAA,QAAMI,UAAU,IAAIR,GACE,ECsB5B,MAxCqED,IAAc,IAAb,KAAEG,GAAMH,EAC5E,MAAM,eAAEgB,GAAmBb,EAE3B,GAAuB,OAAnBa,EACF,OAAOX,EAAAA,cAAAA,EAAAA,SAAA,MAET,MAAM,YAAEY,EAAW,KAAEC,GAASF,EAC9B,OACEX,EAAAA,cAACc,EAAI,KACHd,EAAAA,cAACe,EAAAA,EAAG,CAACP,MAAOI,EAAYJ,QACxBR,EAAAA,cAAA,OAAKI,UAAU,4CACbJ,EAAAA,cAAA,OAAKI,UAAU,wBACbJ,EAAAA,cAACgB,EAAAA,KAAI,CAACC,GAAG,KAAI,UACbjB,EAAAA,cAAA,SAAIY,EAAYM,OAElBlB,EAAAA,cAAA,OAAKI,UAAU,QACbJ,EAAAA,cAAA,UAAKY,EAAYJ,OACjBR,EAAAA,cAAA,OACEI,UAAU,0BACVe,wBAAyB,CAAEC,OAAQP,OAIpC,C","sources":["webpack://jharrilim.github.io/./src/layouts/post.tsx","webpack://jharrilim.github.io/./src/templates/blog-template.tsx"],"sourcesContent":["/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React, { FC } from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport Header from '../components/header';\nimport { IndexContext } from '../contexts';\n\nexport interface PostProps {\n  hideHeader?: boolean;\n}\n\nconst Post: FC<PostProps> = ({ children, hideHeader = false }) => {\n  const data = useStaticQuery(graphql`\n    query PostSiteTitle {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    } \n  `);\n\n  return (\n    <IndexContext.Provider value={{ hideHeader }}>\n      <Header\n        className=\"header\"\n        siteTitle={data.site.siteMetadata.title}\n        style={{ position: 'sticky' }}\n      />\n      <main className=\"\">{children}</main>\n    </IndexContext.Provider>\n  );\n};\n\nexport default Post;\n","import React, { FC } from 'react';\nimport { graphql, PageProps, Link } from 'gatsby';\nimport './blog-template.css';\nimport SEO from '../components/seo';\nimport Post from '../layouts/post';\n\ninterface Post {\n  html: string;\n  fields: {\n    slug: string;\n  };\n  frontmatter: {\n    title: string;\n    date: string;\n  };\n}\n\nconst BlogTemplate: FC<PageProps<{ markdownRemark: Post | null }>> = ({ data }) => {\n  const { markdownRemark } = data; // data.markdownRemark holds your post data\n\n  if (markdownRemark === null)\n    return <></>;\n\n  const { frontmatter, html } = markdownRemark;\n  return (\n    <Post>\n      <SEO title={frontmatter.title} />\n      <div className=\"pt-16 md:pt-16 blog__blog-post-container\">\n        <div className=\"flex justify-between\">\n          <Link to=\"/\">&lt; Back</Link>\n          <p>{frontmatter.date}</p>\n        </div>\n        <div className=\"mt-4\">\n          <h1>{frontmatter.title}</h1>\n          <div\n            className=\"blog__blog-post-content\"\n            dangerouslySetInnerHTML={{ __html: html }}\n          />\n        </div>\n      </div>\n    </Post>\n  );\n};\n\nexport const pageQuery = graphql`\n  query($slug: String!) {\n    markdownRemark(frontmatter: { slug: { eq: $slug } published: { eq: true } }) {\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        slug\n        title\n      }\n    }\n  }\n`;\n\nexport default BlogTemplate;\n"],"names":["_ref","children","hideHeader","data","useStaticQuery","React","IndexContext","value","Header","className","siteTitle","site","siteMetadata","title","style","position","markdownRemark","frontmatter","html","Post","SEO","Link","to","date","dangerouslySetInnerHTML","__html"],"sourceRoot":""}